name: Security – React/Vite (SAST & SCA)

on:
  pull_request:
  push:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write    # SARIF 업로드 권한
      pull-requests: write      # (선택) PR 코멘트용

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0        # gitleaks가 히스토리 스캔 가능

      - name: Install jq (for SARIF checks)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      # ──────────────────────────────
      # Node deps 설치 (npm audit용)
      # ──────────────────────────────
      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies (no scripts)
        if: ${{ hashFiles('**/package-lock.json') != '' || hashFiles('**/pnpm-lock.yaml') != '' || hashFiles('**/yarn.lock') != '' }}
        run: npm ci --ignore-scripts --no-audit

      # ──────────────────────────────
      # Semgrep (SAST) — JS/React + OWASP
      # ──────────────────────────────
      - name: Semgrep (OWASP + JS/React)
        uses: semgrep/semgrep-action@v1
        with:
          config: |
            p/owasp-top-ten
            p/javascript
            p/react
          args: --sarif -o semgrep.sarif

      - name: Check Semgrep SARIF has results
        id: semgrep_sarif_check
        run: |
          if [ ! -s semgrep.sarif ]; then
            echo "ok=false" >> $GITHUB_OUTPUT; exit 0
          fi
          runs=$(jq '.runs | length' semgrep.sarif 2>/dev/null || echo 0)
          results=$(jq '[.runs[].results] | flatten | length' semgrep.sarif 2>/dev/null || echo 0)
          if [ "$runs" -gt 0 ] && [ "$results" -gt 0 ]; then echo "ok=true" >> $GITHUB_OUTPUT; else echo "ok=false" >> $GITHUB_OUTPUT; fi

      - name: Upload Semgrep SARIF
        if: ${{ steps.semgrep_sarif_check.outputs.ok == 'true' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      # ──────────────────────────────
      # Node 의존성 SCA — npm audit (리포팅 모드)
      # ──────────────────────────────
      - name: Node audit (npm)
        if: ${{ hashFiles('**/package-lock.json') != '' || hashFiles('**/pnpm-lock.yaml') != '' || hashFiles('**/yarn.lock') != '' }}
        run: |
          npm audit --audit-level=high || true

      # ──────────────────────────────
      # Trivy (filesystem scan) — package-lock.json 등에서 취약점 탐지 + SARIF
      # ──────────────────────────────
      - name: Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          ignore-unfixed: true
          severity: HIGH,CRITICAL
          format: sarif
          output: trivy-fs.sarif
          exit-code: '0'   # 게이트로 쓸 땐 '1'

      - name: Check Trivy SARIF has results
        id: trivyfs_sarif_check
        run: |
          if [ ! -s trivy-fs.sarif ]; then
            echo "ok=false" >> $GITHUB_OUTPUT; exit 0
          fi
          runs=$(jq '.runs | length' trivy-fs.sarif 2>/dev/null || echo 0)
          results=$(jq '[.runs[].results] | flatten | length' trivy-fs.sarif 2>/dev/null || echo 0)
          if [ "$runs" -gt 0 ] && [ "$results" -gt 0 ]; then echo "ok=true" >> $GITHUB_OUTPUT; else echo "ok=false" >> $GITHUB_OUTPUT; fi

      - name: Upload Trivy FS SARIF
        if: ${{ steps.trivyfs_sarif_check.outputs.ok == 'true' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif

      # ──────────────────────────────
      # Hadolint (Dockerfile Lint)
      # ──────────────────────────────
      - name: Locate Dockerfile(s)
        id: df
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t files < <(find . -type f \( -iname "dockerfile" -o -iname "*.dockerfile" \) | sort || true)
          if [ ${#files[@]} -eq 0 ]; then
            echo "found=false" >> $GITHUB_OUTPUT
            echo "count=0"     >> $GITHUB_OUTPUT
            echo "No Dockerfile found. Skipping hadolint."
            exit 0
          fi
          printf '%s\n' "${files[@]}" > dockerfiles.list
          echo "found=true"         >> $GITHUB_OUTPUT
          echo "count=${#files[@]}" >> $GITHUB_OUTPUT

      - name: Run hadolint (container CLI)
        if: ${{ steps.df.outputs.found == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t files < dockerfiles.list
          echo "Linting: ${files[*]}"
          docker run --rm -v "$PWD":/work -w /work hadolint/hadolint:latest \
            hadolint --format sarif "${files[@]}" > hadolint.sarif || true
          test -s hadolint.sarif || echo '{"version":"2.1.0","runs":[]}' > hadolint.sarif
          ls -l hadolint.sarif

      - name: Upload Hadolint SARIF
        if: ${{ steps.df.outputs.found == 'true' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: hadolint.sarif

      # ──────────────────────────────
      # (선택) 도커 이미지 스캔: Dockerfile 있을 때 로컬에서 빌드 → Trivy image
      # ──────────────────────────────
      - name: Build image (local only)
        if: ${{ steps.df.outputs.found == 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: local/lms-front:secscan

      - name: Trivy image scan
        if: ${{ steps.df.outputs.found == 'true' }}
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image
          image-ref: local/lms-front:secscan
          ignore-unfixed: true
          severity: HIGH,CRITICAL
          format: sarif
          output: trivy-image.sarif
          exit-code: '0'

      - name: Check Trivy IMG SARIF has results
        if: ${{ steps.df.outputs.found == 'true' }}
        id: trivyimg_sarif_check
        run: |
          if [ ! -s trivy-image.sarif ]; then
            echo "ok=false" >> $GITHUB_OUTPUT; exit 0
          fi
          runs=$(jq '.runs | length' trivy-image.sarif 2>/dev/null || echo 0)
          results=$(jq '[.runs[].results] | flatten | length' trivy-image.sarif 2>/dev/null || echo 0)
          if [ "$runs" -gt 0 ] && [ "$results" -gt 0 ]; then echo "ok=true" >> $GITHUB_OUTPUT; else echo "ok=false" >> $GITHUB_OUTPUT; fi

      - name: Upload Trivy IMG SARIF
        if: ${{ steps.df.outputs.found == 'true' && steps.trivyimg_sarif_check.outputs.ok == 'true' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif

      # ──────────────────────────────
      # Gitleaks (Secrets)
      # ──────────────────────────────
      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
